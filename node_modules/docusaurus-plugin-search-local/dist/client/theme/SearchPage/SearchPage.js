import React, { useCallback, useEffect, useMemo, useState } from 'react';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import { usePluginData } from '@docusaurus/useGlobalData';
import Layout from '@theme/Layout';
import Head from '@docusaurus/Head';
import Link from '@docusaurus/Link';
import useSearchQuery from '../hooks/useSearchQuery';
import { fetchIndexes } from '../../utils/fetchIndexes';
import { SearchSourceFactory } from '../../utils/SearchSourceFactory';
import { SearchAnalyticsFactory } from '../../utils/SearchAnalyticsFactory';
import { highlight } from '../../utils/highlight';
import { highlightStemmed } from '../../utils/highlightStemmed';
import { getStemmedPositions } from '../../utils/getStemmedPositions';
import LoadingRing from '../LoadingRing/LoadingRing';
import { simpleTemplate } from '../../utils/simpleTemplate';
import ErrorBoundary from '../ErrorBoundary';
import styles from './SearchPage.module.css';
export default function SearchPage() {
    const { siteConfig: { baseUrl }, } = useDocusaurusContext();
    const { indexHash, removeDefaultStopWordFilter, translations } = usePluginData('docusaurus-plugin-search-local');
    const { searchValue, updateSearchPath } = useSearchQuery();
    const [searchQuery, setSearchQuery] = useState(searchValue);
    const [searchSource, setSearchSource] = useState();
    const [searchResults, setSearchResults] = useState();
    const pageTitle = useMemo(() => searchQuery
        ? simpleTemplate(translations.search_results_for, {
            keyword: searchQuery,
        })
        : translations.search_the_documentation, [
        searchQuery,
        translations.search_results_for,
        translations.search_the_documentation,
    ]);
    useEffect(() => {
        updateSearchPath(searchQuery);
        if (searchSource) {
            if (searchQuery) {
                searchSource(searchQuery, (results) => {
                    setSearchResults(results);
                });
            }
            else {
                setSearchResults(undefined);
            }
        }
        // `updateSearchPath` should not be in the deps,
        // otherwise will cause call stack overflow.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [searchQuery, searchSource]);
    const handleSearchInputChange = useCallback((e) => {
        setSearchQuery(e.target.value);
    }, []);
    useEffect(() => {
        async function doFetchIndexes() {
            const { wrappedIndexes } = await fetchIndexes(baseUrl, indexHash);
            setSearchSource(() => SearchSourceFactory({
                wrappedIndexes,
                removeDefaultStopWordFilter,
                resultsLimit: 100,
                onResults: SearchAnalyticsFactory(),
            }));
        }
        doFetchIndexes();
    }, [baseUrl, indexHash, removeDefaultStopWordFilter]);
    return (React.createElement(Layout, null,
        React.createElement(Head, null,
            React.createElement("meta", { property: 'robots', content: 'noindex, follow' })),
        React.createElement(ErrorBoundary, null,
            React.createElement("div", { className: 'container margin-vert--lg' },
                React.createElement("h1", null, pageTitle),
                React.createElement("input", { type: 'search', name: 'q', className: styles.searchQueryInput, "aria-label": 'Search', onChange: handleSearchInputChange, value: searchQuery, autoComplete: 'off', autoFocus: true }),
                !searchSource && searchQuery && (React.createElement("div", null,
                    React.createElement(LoadingRing, null))),
                searchResults &&
                    (searchResults.length > 0 ? (React.createElement("p", null, simpleTemplate(searchResults.length === 1
                        ? translations.count_documents_found
                        : translations.count_documents_found_plural, {
                        count: searchResults.length,
                    }))) : process.env.NODE_ENV === 'production' ? (React.createElement("p", null, translations.no_documents_were_found)) : (React.createElement("p", null, "\u26A0\uFE0F The search index is only available when you run docusaurus build!"))),
                React.createElement("section", null, searchResults &&
                    searchResults.map((item) => (React.createElement(SearchResultItem, { key: item.document.i, searchResult: item }))))))));
}
function SearchResultItem({ searchResult: { document, type, page, tokens, metadata }, }) {
    const isTitle = type === 0;
    const isContent = type === 2;
    const pathItems = (isTitle ? document.b : page.b).slice();
    const articleTitle = (isContent ? document.s : document.t);
    if (!isTitle) {
        pathItems.push(page.t);
    }
    return (React.createElement("article", { className: styles.searchResultItem },
        React.createElement("h2", null,
            React.createElement(Link, { to: document.u + (document.h || ''), dangerouslySetInnerHTML: {
                    __html: isContent
                        ? highlight(articleTitle, tokens)
                        : highlightStemmed(articleTitle, getStemmedPositions(metadata, 't'), tokens, 100),
                } })),
        pathItems.length > 0 && (React.createElement("p", { className: styles.searchResultItemPath }, pathItems.join(' â€º '))),
        isContent && (React.createElement("p", { className: styles.searchResultItemSummary, dangerouslySetInnerHTML: {
                __html: highlightStemmed(document.t, getStemmedPositions(metadata, 't'), tokens, 100),
            } }))));
}
